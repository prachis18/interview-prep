
Difference between String, String Buffer and String Builder ?

Mutability Difference:

String is immutable, if you try to alter their values, another object gets created, whereas StringBuffer and StringBuilder are mutable so they can change their values.

Thread-Safety Difference:

The difference between StringBuffer and StringBuilder is that StringBuffer is thread-safe. So when the application needs to be run only in a single thread then it is better to use StringBuilder. StringBuilder is more efficient than StringBuffer.

Situations:

    If your string is not going to change use a String class because a String object is immutable.
    If your string can change (example: lots of logic and operations in the construction of the string) and will only be accessed from a single thread, using a StringBuilder is good enough.
    If your string can change, and will be accessed from multiple threads, use a StringBuffer because StringBuffer is synchronous so you have thread-safety.

what are the Different Wait types?
Implicit, Explicit and Fluent Wait are the different waits used in Selenium. Usage of these waits are totally based on the elements which are loaded at different intervals of time

The Implicit Wait in Selenium is used to tell the web driver to wait for a certain amount of time before it throws a "No Such Element Exception". The default setting is 0. Once we set the time, the web driver will wait for the element for that time before throwing an exception. 
driver.manage().timeouts().implicitlyWait(10,TimeUnit.SECONDS) ;

The Explicit Wait in Selenium is used to tell the Web Driver to wait for certain conditions (Expected Conditions) or maximum time exceeded before throwing "ElementNotVisibleException" exception. It is an intelligent kind of wait, but it can be applied only for specified elements. It gives better options than implicit wait as it waits for dynamically loaded Ajax elements. 
Once we declare explicit wait we have to use "ExpectedConditions" or we can configure how frequently we want to check the condition using Fluent Wait.
The following are the Expected Conditions that can be used in Selenium Explicit Wait

    alertIsPresent()
    elementSelectionStateToBe()
    elementToBeClickable()
    elementToBeSelected()
    frameToBeAvaliableAndSwitchToIt()
    invisibilityOfTheElementLocated()
    invisibilityOfElementWithText()
    presenceOfAllElementsLocatedBy()
    presenceOfElementLocated()
    textToBePresentInElement()
    textToBePresentInElementLocated()
    textToBePresentInElementValue()
    titleIs()
    titleContains()
    visibilityOf()
    visibilityOfAllElements()
    visibilityOfAllElementsLocatedBy()
    visibilityOfElementLocated()

guru99seleniumlink= wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath( "/html/body/div[1]/section/div[2]/div/div[1]/div/div[1]/div/div/div/div[2]/div[2]/div/div/div/div/div[1]/div/div/a/i")));



The Fluent Wait in Selenium is used to define maximum time for the web driver to wait for a condition, as well as the frequency with which we want to check the condition before throwing an "ElementNotVisibleException" exception. It checks for the web element at regular intervals until the object is found or timeout happens. 

Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)							
			.withTimeout(30, TimeUnit.SECONDS) 			
			.pollingEvery(5, TimeUnit.SECONDS) 			
			.ignoring(NoSuchElementException.class);


Class and interface difference
A class describes the attributes and behaviors of an object. An interface contains behaviors that a class implements. A class may contain abstract methods, concrete methods. An interface contains only abstract methods.


Selenium – what are actions, how will you handle select dropdown, which is faster CSS or Xpath.

Select class has several methods that can be used to handle dropdowns
	
Select select = new Select(WebElement webelement);

    selectByIndex
    selectByValue
    selectByVisibleText
Select se = new Select(driver.findElement(By.xpath("//*[@id='oldSelectMenu']")));
 
// Select the option by index
se.selectByIndex(3);

    getOptions()
    getFirstSelectedOption()
    getSelectedOptions()

CSS Selector is best option if web element has no ID and name. CSS is faster than XPath. CSS is more readable than XPath. It also improves the performance.

Why TestNG is used in the testing framework?
TestNG is a testing framework that is capable of making Selenium tests easier to understand and of generating reports that are easy to understand. The main advantages of TestNG over JUnit are the following. Annotations are easier to use and understand. Test cases can be grouped more easily.


Explain difference b/w regression, smoke,sanity testing

Sanity Testing is done to ensure the product is sane, rational for more detailed testing. 
In Theory, Sanity Testing is a subset of regression testing. Some high priority regression test cases constitute sanity test case usually. 
Smoke testing is an approach which is usually carried out during the initial development stages of the Software Development Life Cycle(SDLC) to make sure that the core functionalities of a program are working fine without any issues. It is executed before any detailed functional tests are done on the software.
Smoke testing is also called as Build Verification Test.

When to perform Smoke Testing

    When developers provide a fresh build to the QA team. A fresh build here means when the build has new changes made by the developers.
    When a new module is added to the existing functionality.

Sanity testing is a kind of testing performed to check whether a software product is working correctly when a new module or functionality gets implemented to an existing product. Sanity testing is a software testing technique which does a quick evaluation of the quality of the software release to determine whether it is eligible for further rounds of testing or not.

Sanity testing is usually performed after receiving a fairly stable software build or sometimes when a software build might have undergone minor changes in the code or functionality. It decides if end to end testing of a software product shall be carried out further or not.



When to perform Sanity Testing

    Build is received after many regressions or if there is a minor change in the code.
    The build is received after bug fixing.
    Just before the deployment on production.

Which of the following methods is used to capture a screenshot in selenium WebDriver?
TakesScreenshot
To take a screenshot in Selenium, we use an interface called TakesScreenshot, which enables the Selenium WebDriver to capture a screenshot and store it in different ways. It has a got a method “getScreenshotAs() ” which captures the screenshot and store it in the specified location.

//Convert webdriver to TakeScreenshot
File screenshotFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
FileUtils.copyFile(screenshotFile , new File("C:\\temp\\screenshot.png));

Page Object Model (POM) is a design pattern, prevalently employ in test mechanization that creates an Object storehouse for web UI elements. It is a method to analytically sort out the scripts in such a way that it makes it effortless for the QA to uphold the code, free of hassles. And to help prevent redundant or duplicate code. The advantage of this model is that it reduces code duplication and develops test maintenance making it more readable, and reusable.

The Page Object Pattern using Page Factory can be made non-frail test code. It helps to reduce and further abolish the replica test code. Besides that, the page factory is useful in improving readability making it easier to create interface documentation.


    Why the main method is static?-

    The main() method is static so that JVM can invoke it without instantiating the class. This also saves the unnecessary wastage of memory which would have been used by the object declared only for calling the main() method by the JVM.
Explanation:
Every word in the public static void main statement has got a meaning to the JVM.

    Public: It is an Access modifier, which specifies from where and who can access the method. Making the main() method public makes it globally available. It is made public so that JVM can invoke it from outside the class as it is not present in the current class.

    class GeeksforGeeks {
        private static void main(String[] args)
        {
            System.out.println("I am a Geek");
        }
    }

    Error: Main method not found in class, please define the main method as:
    public static void main(String[] args)
    or a JavaFX application class must extend javafx.application.Application

    Static: It is a keyword which is when associated with a method, makes it a class related method. The main() method is static so that JVM can invoke it without instantiating the class. This also saves the unnecessary wastage of memory which would have been used by the object declared only for calling the main() method by the JVM.

    class GeeksforGeeks {
        public void main(String[] args)
        {
            System.out.println("I am a Geek");
        }
    }

    Error: Main method is not static in class test, please define the main method as:
    public static void main(String[] args)

    Void: It is a keyword and used to specify that a method doesn’t return anything. As main() method doesn’t return anything, its return type is void. As soon as the main() method terminates, the java program terminates too. Hence, it doesn’t make any sense to return from main() method as JVM can’t do anything with the return value of it.

    class GeeksforGeeks {
        public static int main(String[] args)
        {
            System.out.println("I am a Geek");
            return 1;
        }
    }

    Error: Main method not found in class, please define the main method as:
    public static void main(String[] args)
    or a JavaFX application class must extend javafx.application.Application

    main: It is the name of Java main method. It is the identifier that the JVM looks for as the starting point of the java program. It’s not a keyword.

    class GeeksforGeeks {
        public static void myMain(String[] args)
        {
            System.out.println("I am a Geek");
        }
    }

    Error: Main method not found in class, please define the main method as:
    public static void main(String[] args)
    or a JavaFX application class must extend javafx.application.Application

    String[] args: It stores Java command line arguments and is an array of type java.lang.String class. Here, the name of the String array is args but it is not fixed and user can use any name in place of it.

    class GeeksforGeeks {
        // javac GeeksforGeeks.java
        // java GeeksforGeeks 1 2 3
        public static void main(String[] args)
        {
            for (String elem : args)
                System.out.println(elem);
        }
    }

    1
    2
    3

    Apart from the above mentioned signature of main, you could use public static void main(String args[]) or public static void main(String… args) to call the main function in java. The main method is called if it’s formal parameter matches that of an array of Strings.

    What is Run time polymorphism


    Run-Time Polymorphism: Whenever an object is bound with the functionality at run time, this is known as runtime polymorphism. The runtime polymorphism can be achieved by method overriding. Java virtual machine determines the proper method to call at the runtime, not at the compile time

Runtime polymorphism or Dynamic Method Dispatch is a process in which a call to an overridden method is resolved at runtime rather than compile-time. 

Upcasting

If the reference variable of Parent class refers to the object of Child class, it is known as upcasting.   
 class A{}  
    class B extends A{}  

    A a=new B();//upcasting  

    Difference between list and set

List                                 Set
1. The List is an ordered sequence.     1. The Set is an unordered sequence.
2. List allows duplicate elements        2. Set doesn’t allow duplicate e lements.
3. Elements by their position can be accessed.  3. Position access to elements is not allowed.
4. Multiple null elements can be stored.    4. Null element can store only once.
5. List implementations are ArrayList, LinkedList, Vector, Stack    5. Set implementations are HashSet, LinkedHashSet.

    Method overloading and overriding

       Method Overloading                                                    Method Overriding
1)  Method overloading is used to increase the readability of the program.  Method overriding is used to provide the specific implementation of the -                                                                              method that is already provided by its super class.

2)  Method overloading is performed within class.                           Method overriding occurs in two classes that have IS-A (inheritance) relationship.

3)  In case of method overloading, parameter must be different.             In case of method overriding, parameter must be same.

4)  Method overloading is the example of compile time polymorphism.         Method overriding is the example of run time polymorphism.

5)  In java, method overloading can't be performed by changing return type of the method only. Return type can be same or different in method overloading. But you must have to change the parameter.       Return type must be same or covariant in method overriding.

    Use of constructor
The purpose of constructor is to initialize the object of a class while the purpose of a method is to perform a task by executing java code. Constructors cannot be abstract, final, static and synchronised while methods can be. Used to initialize the data members of a class.


    Difference between static and non-static methods

Key                  Static                                                                                  Non-Static
 Access              A static method can access only static members and can not access non-static members.   A non-static method can access both static as -                                                                                                            well as non-static members.

 Binding             Static method uses complie time binding or early binding.   Non-static method uses run time binding or dynamic binding.

 Overriding             A static method cannot be overridden being compile time binding.    A non-static method can be overridden being dynamic binding.

 Memory allocation   Static method occupies less space and memory allocation happens once.   A non-static method may occupy more space. Memory allocation happens when method is invoked and memory is deallocated once method is executed completely.

 Keyword                A static method is declared using static keyword.                       A normal method is not required to have any special keyword.


    How to write XPath of column ‘B value using column ‘a’ text


    How to handle drag and drop

    The Actions class has two methods that support Drag and Drop. Let's study them-

Actions.dragAndDrop(Sourcelocator, Destinationlocator)

In dragAndDrop method, we pass the two parameters -

    First parameter "Sourcelocator" is the element which we need to drag
    Second parameter "Destinationlocator" is the element on which we need to drop the first element

Actions.dragAndDropBy(Sourcelocator, x-axis pixel of Destinationlocator, y-axis pixel of Destinationlocator)

dragAndDropBy method we pass the 3 parameters -

    First parameter "Sourcelocator" is the element which we need to drag
    The second parameter is x-axis pixel value of the 2nd element on which we need to drop the first element.
    The third parameter is y-axis pixel value of the 2nd element on which we need to drop the first element. 



    How to handle multiple windows

A window handle stores the unique address of the browser windows. It is just a pointer to a window, whose return type is alphanumeric. The window handle in Selenium helps in handling multiple windows and child windows. Each browser will have a unique window handle value with which we can uniquely identify it.

Selenium WebDriver provides various methods for handling of windows. Few of them are:

    getWindowHandle( ): When a website opens, we need to handle the main window i.e the parent window using driver.getWindowHandle( ); method. With this method, we get a unique ID of the current window which will identify it within this driver instance. This method will return the value of the String type.
    getWindowHandles( ): To handle all opened windows which are the child windows by web driver, we use driver.getWindowHandles( ); method. The windows store in a Set of String type and here we can see the transition from one window to another window in a web application. Its return type is Set <String>.
    switchto(): Using this method we perform switch operation within windows.
    action: This method helps in performing certain actions on the windows.

    

    What are the TestNG annotations used
     TestNG annotations are the code that is written inside your source test code logic to control the flow of the execution of tests. It is essential to annotate your methods in TestNG to run the tests. TestNG will ignore the method which does not contain an annotation since it won’t know when to execute this method.
In TestNG, there are ten types of annotations:

    @BeforeSuite – The @BeforeSuite method in TestNG runs before the execution of all other test methods.
    @AfterSuite – The @AfterSuite method in TestNG runs after the execution of all other test methods.
    @BeforeTest – The @BeforeTest method in TestNG runs before the execution of all the test methods that are inside that folder.
    @AfterTest – The @AfterTest method in TestNG executes after the execution of all the test methods that are inside that folder.
    @BeforeClass – The @BeforeClass method in TestNG will run before the first method invokes of the current class.
    @AfterClass – The @AfterClass method in TestNG will execute after all the test methods of the current class execute.
    @BeforeMethod – The @BeforeMethod method in TestNG will execute before each test method. 
    @AfterMethod – The @AfterMethod method in TestNG will run after each test method is executed.
    @BeforeGroups – The @BeforeGroups method in TestNG run before the test cases of that group execute. It executes just once. 
    @AfterGroups – The @AfterGroups method in TestNG run after the test cases of that group execute. It executes only once. 


    Which annotation used for parameterization
Suite level parameters:
<suite name="TestNG Parameters Suite">
   <parameter name="val1" value="3" />
   <parameter name="val2" value="50" />
   <test name="Params">
      <classes>
         <class name="Params" />
      </classes>
   </test>
</suite>

above code in testng.xml

below code in your java code:

import org.testng.annotations.Parameters;
import org.testng.annotations.Test;
 
public class Params
{
    @Test
    @Parameters ({"val1", "val2"})
    public void Sum(int v1, int v2) {
     int finalsum = v1 + v2;
        System.out.println("The final sum of the given values is " + finalsum);
    }
    
    @Test
    @Parameters ({"val1", "val2"})
    public void Diff (int v1, int v2) {
     int finaldiff = v1 - v2;
     System.out.println("The final difference of the given values is " + finaldiff);
    }
}

    Test Level parameters:
    <suite name="TestNG Parameters Suite">
   <test name="Params">
      <parameter name="val1" value="2" />
      <parameter name="val2" value="3" />
      <classes>
         <class name="Params" />
      </classes>
   </test>
</suite>
above code in testng.xml

below code in your java code:

public class Params
{
    @Test
    @Parameters ({"val1", "val2"})
    public void Sum(int v1, int v2) {
     int finalsum = v1 + v2;
        System.out.println("The final sum of the given values is " + finalsum);
    }


TestNG gives preference to the Parameters defined at the test level over the parameters set at the suite level.

    About Maven – clean build
  Prints out the classpath needed to run your project (application) based on the dependencies configured in the pom. xml file. Keep in mind, that when you execute the clean goal of Maven, the target directory is removed, meaning you lose all compiled classes from previous builds.

    Git workflow
    A Git workflow is a recipe or recommendation for how to use Git to accomplish work in a consistent and productive manner. Git workflows encourage developers and DevOps teams to leverage Git effectively and consistently. Git offers a lot of flexibility in how users manage changes.

    
    What is Jenkins and how to set up it














Defect Lifecycle, SDLC, STLC
