EXCEPTIONS IN SELENIUM AND HOW IT IS HANDLED:

Example 1: I do not use any Page Object Factory but I use my own Page Object Pattern and I always print error logs and take screenshot on any exception I encounter. Please look at the code below:

public static WebElement btn_ReportCategory(WebDriver driver) throws Exception{

        try{

            WebElement element = driver.findElement(By.linkText("+ Report Categories"));

        }catch (Exception e){

			// Printing logs for my report

            Log.error("Report Category button element is not found.");

			// Taking screenshot for defect reporting

			Utils.captureScreenShot();

			// After doing my work, now i want to stop my test case

            throw(e);

        }

		// This will return the Element in case of no Exception

        return element;

    }
Example 2: TimeoutException using Selenium WebDriver.

try{

    myTestDriver.findElement(By.xpath("//*[@id='register']")).click();

}catch (TimeoutException toe) {

	wait.until( ExpectedConditions.elementToBeClickable(By.xpath("//*[@id='register']")));

	myTestDriver.findElement(By.xpath("//*[@id='register']")).click();

}catch (Exception e) {

	Log.error("Register element is not found.");

	throw(e);

    }

}
Example 3: Let's assume that in Selenium WebDriver you want to verify the presence of any element on the page. You would not be able to get this with element locator because if the element is present, your locator will work and you will easily be able to print that the element is present but in case your element is not present on the page, your locator will fail and simply throw the exception. This case would be easily handled with the self-written function.

public static boolean verifyObjectPresent(WebDriver driver) {

	    try {

	    	driver.findElement(By.linkText("+ Report Categories"));

	    	return true;

	    } catch (Exception e) { 

	    	return false;

	    }

	}





******Reading Data from Excel******
package utility;

import java.io.FileInputStream;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
    public class ExcelUtils {
                private static XSSFSheet ExcelWSheet;
                private static XSSFWorkbook ExcelWBook;
                private static XSSFCell Cell;

            //This method is to set the File path and to open the Excel file
            //Pass Excel Path and SheetName as Arguments to this method
            public static void setExcelFile(String Path,String SheetName) throws Exception {
	                FileInputStream ExcelFile = new FileInputStream(Path);
	                ExcelWBook = new XSSFWorkbook(ExcelFile);
	                ExcelWSheet = ExcelWBook.getSheet(SheetName);
                   }

            //This method is to read the test data from the Excel cell
            //In this we are passing parameters/arguments as Row Num and Col Num
            public static String getCellData(int RowNum, int ColNum) throws Exception{
            	  Cell = ExcelWSheet.getRow(RowNum).getCell(ColNum);
                  String CellData = Cell.getStringCellValue();
                  return CellData;
            	}

    	}



***************************Run Cucumber Test from Command Line / Terminal******************


1. Open the command prompt and cd until the project root directory.

2. let's run all the Cucumber Scenarios from the command prompt. Since it's a Maven project and we have added Cucumber in test scope dependency and all features are also added in src/test packages, run the following command in the command prompt: mvn test
mvn test runs Cucumber Features using Cucumber's JUnit Runner. The @RunWith (Cucumber.class) annotation on the TestRunner class tells JUnit to kick off Cucumber. Cucumber run time parses the command-line options to know what Feature to run, where the Glue Code lives, what plugins to use, and so on.

###
If we want to run single Scenario from the cmd, this is how we specify : mvn test -Dcucumber.options="feature file path" + "line number of the scenario"

*****Running Scenarios using Tags from Command Line
If you want to run the test cases associated to Tags, this is how we specify : mvn test -Dcucumber.options="--tags @tag Name"
 

****Running a Feature file only from Command Line
mvn test -Dcucumber.options="src/test/resources/functionalTests/End2End_Tests.feature


****Passing multiple Parameter at once
Its also possible to pass multiple options at once. This is how it can be done mvn test -Dcucumber.options="SomeThing" -Dcucumber.options="SomeThing" -Dcucumber.options="SomeThing"

mvn test -Dcucumber.options="src/test/resources/functionalTests/End2End_Tests.feature" -Dcucumber.options="--tags @Smoke"




************

High Priority & High Severity: An error which occurs on the basic functionality of the application and will not allow the user to use the system. (Eg. A site maintaining the student details, on saving record if it, doesn’t allow to save the record then this is high priority and high severity bug.)

High Priority & Low Severity: The spelling mistakes that happens on the cover page or heading or title of an application.

High Severity & Low Priority: An error which occurs on the functionality of the application (for which there is no workaround) and will not allow the user to use the system but on click of link which is rarely used by the end user.

Low Priority and Low Severity: Any cosmetic or spelling issues which is within a paragraph or in the report (Not on cover page, heading, title).

************Selenium WebDriver Event Listener**************************

For more logs from the Webdriver so that you can debug your scripts or maybe log more information about your tests. Here is your answer to it, EventFiringWebDriver and the WebDriverEventListner. EventFiringWebDriver is a class and is used to wrap your webdriver 
around to throw events and WebDriverEventListner is an interface that you have to implement to catch the webdriver events
 EventFiringWebDriver class. This is a class that implements the WebDriver interface
It means that you will get all your regular webdriver methods like

    findElementById

    findElementByTagName

In addition to this, you will have two methods

- register(WebDriverEventListener eventListener)

    unregister(WebDriverEventListener eventListener)

Register method will let you register our implementation of WebDriverEventListner to listen to the WebDriver events and with unregister you will be able to detach.

Implement the Selenium WebDriver Event Listener Interface
public class EventHandler implements WebDriverEventListener{

	public void afterChangeValueOf(WebElement arg0, WebDriver arg1) {
		// TODO Auto-generated method stub

	}

	public void afterClickOn(WebElement arg0, WebDriver arg1) {
		// TODO Auto-generated method stub

	}

	public void afterFindBy(By arg0, WebElement arg1, WebDriver arg2) {
		// TODO Auto-generated method stub

	}

	public void afterNavigateBack(WebDriver arg0) {
		// TODO Auto-generated method stub

	}

	public void afterNavigateForward(WebDriver arg0) {
		// TODO Auto-generated method stub

	}

	public void afterNavigateTo(String arg0, WebDriver arg1) {
		// TODO Auto-generated method stub

	}

	public void afterScript(String arg0, WebDriver arg1) {
		// TODO Auto-generated method stub

	}

	public void beforeChangeValueOf(WebElement arg0, WebDriver arg1) {
		// TODO Auto-generated method stub

	}

	public void beforeClickOn(WebElement arg0, WebDriver arg1) {
		// TODO Auto-generated method stub

	}

	public void beforeFindBy(By arg0, WebElement arg1, WebDriver arg2) {
		// TODO Auto-generated method stub

	}

	public void beforeNavigateBack(WebDriver arg0) {
		// TODO Auto-generated method stub

	}

	public void beforeNavigateForward(WebDriver arg0) {
		// TODO Auto-generated method stub

	}

	public void beforeNavigateTo(String arg0, WebDriver arg1) {
		// TODO Auto-generated method stub

	}

	public void beforeScript(String arg0, WebDriver arg1) {
		// TODO Auto-generated method stub

	}

	public void onException(Throwable arg0, WebDriver arg1) {
		// TODO Auto-generated method stub

	}

}

Here every method corresponds to an event. For eg. the afterNavigateTo() method. This one is called every time the navigate to a page is completed.


All we have to do is put some code inside the method so that our code is executed every time the page navigates to some other page. Ideally, you would be adding your logging statements here


Create Event Throwing WebDriver
Create a regular WebDriver.

FirefoxDriver driver = new FirefoxDriver();

2) Now create an EventThrowingWebDriver using our regular WebDriver created above.

EventFiringWebDriver eventDriver = new EventFiringWebDriver(driver);

    Create an instance of your eventHandler class and register it for events using the register method of EventFiringWebDriver object created above. Here is the code

 EventHandler handler = new EventHandler();
 eventDriver.register(handler);

public class programMain {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

         FirefoxDriver driver = new FirefoxDriver();
         EventFiringWebDriver eventDriver = new EventFiringWebDriver(driver);

		EventHandler handler = new EventHandler();
		eventDriver.register(handler);
		eventDriver.get("https://toolsqa.com/automation-practice-switch-windows/");
		WebElement element = eventDriver.findElement(By.id("target"));
		element.click();

	}
***************************What can JavaScript and Selenium JavaScriptExecutor do for us?**************************

The first thing to know that the JavaScriptExecutor comes separately and also comes under the WebDriver but both do the same thing. Within the WebDriver, it is named as ExecuteScript. 


WebElement value = (WebElement) Driver.executeScript("return document.evaluate( '//body//div/iframe' ,document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null ).singleNodeValue;");

Notice the command document.evaluate(). This is the Xpath evaluator in javascript. Signature of the function is

document.evaluate( xpathExpression, contextNode, namespaceResolver, resultType, result );

    xpathExpression:  A string containing the XPath expression to be evaluated.
    contextNode:  A node in the document against which the xpathExpression should be evaluated, including any and all of its child nodes. The document node is the most commonly used.
    NamespaceResolver:  A function that will be passed any namespace prefixes contained within xpathExpression which returns a string representing the namespace URI associated with that prefix.
    resultType: A constant that specifies the desired result type to be returned as a result of the evaluation. The most commonly passed constant is XPathResult.ANY_TYPE which will return the results of the XPath expression as the most natural type.
    result:  If an existing XPathResult object is specified, it will be reused to return the results. Specifying null will create a new XPathResult object



Let's say you want to know total number of frames inside a webpage, including the Iframes. You cant do it using selenium directly, you may need to create your own logic to parse and find frames. However, in JavaScript is simple and is done like this.

ff.executeScript("document.frames.length;");

Beware of this one. It only works in IE, can't get it to work for Mozilla.

What is JavaScriptExecutor?

JavaScriptExecutor is an interface that provides a mechanism to execute Javascript through selenium driver. It provides “executescript” & "executeAsyncScript" methods, to run JavaScript in the context of the currently selected frame or window.

Generate Alert Pop Window

JavascriptExecutor js = (JavascriptExecutor)driver;
Js.executeScript("alert('hello world');");

Click Action

JavascriptExecutor js = (JavascriptExecutor)driver;
js.executeScript("arguments[0].click();", element);

Refresh Browser

JavascriptExecutor js = (JavascriptExecutor)driver;
driver.executeScript("history.go(0)");

Get InnerText of a Webpage

JavascriptExecutor js = (JavascriptExecutor)driver;
string sText =  js.executeScript("return document.documentElement.innerText;").toString();

Get Title of a WebPage

JavascriptExecutor js = (JavascriptExecutor)driver;
string sText =  js.executeScript("return document.title;").toString();

Scroll Page

 JavascriptExecutor js = (JavascriptExecutor)driver;
  //Vertical scroll - down by 150  pixels
  js.executeScript("window.scrollBy(0,150)");


****Scroll element into view***

Approach 1

Use element.scrollIntoView() method of element object in JavaScript. The signature of the method is

element.scrollIntoView(alignWithTop)

alignWithTop is a Boolean, if you want to your element to come in view with top of the element touching the top of the viewport of browser put this as true else a false.

public static void main(String[] args) throws Exception {

		// TODO Auto-generated method stub

		FirefoxDriver ff = new FirefoxDriver();

		ff.get("https://toolsqa.com");

		Thread.sleep(5000);

		ff.executeScript("document.getElementById('text-8').scrollIntoView(true);");

        }

Approach 2

We scroll the page by lines till our webelement is visible. To do this we will use the JavaScript function

window.scrollByLines(NumberofLines)

NumberofLines is an integer value specifying a number of lines to scroll. A positive value signifies downward scroll and a negative value specifies upward scroll.

here is the code listing of this

public static void main(String[] args) throws Exception {

		// TODO Auto-generated method stub		

		FirefoxDriver ff = new FirefoxDriver();

		ff.get("https://toolsqa.com");

		Thread.sleep(5000);

		//ff.executeScript("document.getElementById('text-8').scrollIntoView(false);");

		WebElement targetElement = ff.findElementById("text-8");

		int x = 0;

		while((Double) ff.executeScript("return document.getElementById('text-8').getBoundingClientRect().top") > 0 )

		{

			x = x + 2;

			ff.executeScript("window.scrollByLines(2)");

			System.out.println("Client top is = " + (Double) ff.executeScript("return document.getElementById('text-8').getBoundingClientRect().top"));			

		}

		System.out.println("Element is visible after  " + x + " scrolls");

}
******************Find Broken Links in Selenium******************************


    200 – Valid Link/success
    301/302 - Page redirection temporary/permanent
    404 – Page not found
    400 – Bad request
    401 – Unauthorized
    500 – Internal Server Error

What are broken links on a Web page?

A broken link, often called a dead link, is any link on a web page that no longer works because there is an underlying issue with the link. When someone clicks on such a link, sometimes an error message is displayed like a page not found. There may not be any error message at all.  These are essentially invalid HTTP requests and have 4xx and 5xx status code. Some common reasons for a broken link on a webpage can be:

Some common reasons for a broken link on a webpage can be:

    The destination web page is down, moved, or no longer exists.
    A web page moved without adding a redirect link.
    The user entered an improper/misspell URL.
    The web page link removed from the website.
    With activated firewall settings, also the browser cannot access the destination web page at times.


What are broken images on a Web Page?

There are cases where an image on the web page does not load properly, and we see "Failed to load image" or similar error messages. In such cases, the image is either corrupt or the image is not at the specified path. A broken image on a web page is a link that is associated with the image, and the link is not working. There can be three possible reasons because of which images doesn't show up on web pages:

    Firstly, the image file is not located in the same path specified in your <img src " "> tag.
    Secondly, the image does not have the same path or filename.
    Thirdly, the image file at the location is either corrupt or undergoes damage, or maybe it's not compatible with a specific browser, and rendering fails in that browser only.


How to find broken links in Selenium tests?

As we discussed, we can check the status code of the link URL to validate whether it is a valid link or not. Let's modify the above code snippet to check how we can validate whether a certain link is valid or not:

package testCases;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;

public class BrokenLinks {
    public static void main(String[] args) {
        System.setProperty("webdriver.chrome.driver","./src/resources/chromedriver");
        WebDriver driver = new ChromeDriver();
        driver.manage().window().maximize();
        driver.get("https://demoqa.com/broken");

        //Storing the links in a list and traversing through the links
        List<WebElement> links = driver.findElements(By.tagName("a"));

        // This line will print the number of links and the count of links.
        System.out.println("No of links are "+ links.size());  
      
        //checking the links fetched.
        for(int i=0;i<links.size();i++)
        {
            WebElement E1= links.get(i);
            String url= E1.getAttribute("href");
            verifyLinks(url);
        }
        
        driver.quit();
    }
    
    
    public static void verifyLinks(String linkUrl)
    {
        try
        {
            URL url = new URL(linkUrl);

            //Now we will be creating url connection and getting the response code
            HttpURLConnection httpURLConnect=(HttpURLConnection)url.openConnection();
            httpURLConnect.setConnectTimeout(5000);
            httpURLConnect.connect();
            if(httpURLConnect.getResponseCode()>=400)
            {
            	System.out.println(linkUrl+" - "+httpURLConnect.getResponseMessage()+"is a broken link");
            }    
       
            //Fetching and Printing the response code obtained
            else{
                System.out.println(linkUrl+" - "+httpURLConnect.getResponseMessage());
            }
        }catch (Exception e) {
      }
   }
}

    Create a WebDriver instance and open URL in the browser "https://demoqa.com/broken".
    HttpURLConnection httpURLConnect=(HttpURLConnection)url.openConnection(): we will check the HTTP status of each using HttpURLConnection class in Java.
    httpURLConnect.setConnectTimeout(5000): It is important to wait before creating a connection as the URL may take time to load. We have set the Connection timeout of 5 seconds.
    httpURLConnect.connect() : Now creation of connection happens.
    getResponsecode(): We will fetch the response code and print OK if the URL works fine. Else will give an error.

Console Output: We are getting 4 links from the webpage, and the HTTP status code of each link is displayed.





